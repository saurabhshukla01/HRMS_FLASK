Great — you need **two things**:

1. **A script for seeding initial data (roles, admin user, etc.)**
2. **A cron job (scheduled task) to create users automatically at intervals.**

Let's build both step by step:

---

## **1. Data Seeding Script**

This script will:

* Run **inside your Flask app context**
* Insert **default roles** and an **admin user**
* Avoid duplicates if run multiple times

### **`seed_data.py`**

```python
import click
from app import create_app, db
from app.models.role_model import Role
from app.models.user_model import User
import uuid
from werkzeug.security import generate_password_hash

app = create_app()

@app.cli.command("seed-data")
def seed_data():
    """Seed initial roles and admin user."""
    with app.app_context():
        # --- Seed Roles ---
        default_roles = ["Admin", "Manager", "Employee"]
        for role_name in default_roles:
            if not Role.query.filter_by(name=role_name).first():
                new_role = Role(uuid=str(uuid.uuid4()), name=role_name)
                db.session.add(new_role)
                click.echo(f"Added role: {role_name}")
        
        # --- Seed Admin User ---
        admin_email = "admin@example.com"
        if not User.query.filter_by(email=admin_email).first():
            admin_role = Role.query.filter_by(name="Admin").first()
            admin_user = User(
                uuid=str(uuid.uuid4()),
                name="System Admin",
                email=admin_email,
                role_id=admin_role.id,
                password=generate_password_hash("admin123")  # Hash your password
            )
            db.session.add(admin_user)
            click.echo(f"Added admin user: {admin_email}")

        db.session.commit()
        click.echo("Seeding complete!")
```

### **How to run**

```bash
flask seed-data
```

---

## **2. Cron Job to Auto-Create Users**

This will create dummy users **every X minutes** using `apscheduler` (or OS cron).

---

### **Option A: Use `APScheduler` inside Flask (Preferred for portability)**

#### Install:

```bash
pip install apscheduler
```

#### Update `app/__init__.py`

```python
from apscheduler.schedulers.background import BackgroundScheduler
import uuid
from werkzeug.security import generate_password_hash
from app import db
from app.models.user_model import User
from app.models.role_model import Role

def create_dummy_user():
    with app.app_context():
        # Pick a role (e.g. Employee)
        role = Role.query.filter_by(name="Employee").first()
        if not role:
            print("No Employee role found. Skipping...")
            return
        
        user = User(
            uuid=str(uuid.uuid4()),
            name=f"User_{uuid.uuid4().hex[:6]}",
            email=f"user_{uuid.uuid4().hex[:6]}@example.com",
            role_id=role.id,
            password=generate_password_hash("password123")
        )
        db.session.add(user)
        db.session.commit()
        print(f"Auto-created user {user.email}")

def start_scheduler(app):
    scheduler = BackgroundScheduler()
    scheduler.add_job(func=create_dummy_user, trigger="interval", minutes=5)  # every 5 min
    scheduler.start()

def create_app():
    app = Flask(__name__)
    app.config.from_object('config.Config')
    db.init_app(app)
    migrate.init_app(app, db)

    # Register blueprints...
    from app.web import user_web, role_web
    app.register_blueprint(user_web.bp)
    app.register_blueprint(role_web.bp)

    # Start cron-like job
    start_scheduler(app)
    return app
```

---

### **Option B: Use OS-level Cron**

If you want **real cron** instead of `apscheduler`:

1. Create `create_user.py`:

```python
from app import create_app, db
from app.models.user_model import User
from app.models.role_model import Role
import uuid
from werkzeug.security import generate_password_hash

app = create_app()

with app.app_context():
    role = Role.query.filter_by(name="Employee").first()
    if role:
        user = User(
            uuid=str(uuid.uuid4()),
            name=f"User_{uuid.uuid4().hex[:6]}",
            email=f"user_{uuid.uuid4().hex[:6]}@example.com",
            role_id=role.id,
            password=generate_password_hash("password123")
        )
        db.session.add(user)
        db.session.commit()
        print(f"Auto-created user {user.email}")
    else:
        print("No Employee role found. Skipping...")
```

2. Add cron job (Linux/macOS):

```bash
crontab -e
```

Add line (every 5 min):

```bash
*/5 * * * * /path/to/venv/bin/python /path/to/project/create_user.py
```

(For Windows: use **Task Scheduler** to run the script every X minutes.)

---

## **Which should we use?**

* If you **control the Flask app server**, `apscheduler` is easier — no OS setup required.
* If you **want independent jobs**, use real cron/Task Scheduler.

---

Do you want me to **merge this into the README** we wrote earlier as a new section (“Data Seeding and Cron Jobs”)?
Or should I **give you ready-to-run files (`seed_data.py`, `create_user.py`) with imports set correctly for your structure**?
